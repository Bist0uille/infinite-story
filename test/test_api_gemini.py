"""
Test script for Gemini API functionality.
Tests API connection, model functionality, and entity extraction.
"""

import asyncio
import sys
import os
import logging

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from services.ai_service import AIClient
from core.engine import GameEngine


async def test_basic_api_connection():
    """Test basic API connection and response."""
    print("=== Testing Basic API Connection ===")
    
    try:
        ai_client = AIClient()
        print(f"‚úì AIClient initialized with model: {ai_client.model}")
        
        # Simple test message
        messages = [
            {"role": "user", "content": "Dis juste 'Bonjour' pour tester la connexion."}
        ]
        
        response = await ai_client.complete(messages, "connection_test")
        print(f"‚úì API Response: {response}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå API Connection Test Failed: {e}")
        return False


async def test_story_generation():
    """Test story generation functionality."""
    print("\n=== Testing Story Generation ===")
    
    try:
        ai_client = AIClient()
        
        # Story generation test
        messages = [
            {"role": "system", "content": "Tu es un ma√Ætre de jeu pour un RPG fantasy. Raconte une histoire courte avec 4 choix num√©rot√©s."},
            {"role": "user", "content": "Commence une aventure fantasy avec le h√©ros Aiden dans une for√™t myst√©rieuse."}
        ]
        
        response = await ai_client.complete(messages, "story_test")
        print(f"‚úì Story Generated ({len(response)} characters):")
        print(f"Preview: {response[:200]}...")
        
        # Check if response contains numbered choices
        lines = response.split('\n')
        numbered_lines = [line for line in lines if any(line.strip().startswith(f"{i}.") or line.strip().startswith(f"{i})") for i in range(1, 5))]
        
        if len(numbered_lines) >= 4:
            print("‚úì Story contains numbered choices")
        else:
            print(f"‚ö†Ô∏è Story may not have proper choices (found {len(numbered_lines)} numbered lines)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Story Generation Test Failed: {e}")
        return False


async def test_entity_extraction():
    """Test entity extraction functionality."""
    print("\n=== Testing Entity Extraction ===")
    
    try:
        ai_client = AIClient()
        game_engine = GameEngine(ai_client)
        
        # Test narrative with characters and locations
        test_narrative = """
        Aiden entre dans la taverne 'Le Dragon Endormi'. Le barman Marcus l'accueille avec un sourire.
        Dans un coin, une myst√©rieuse femme en cape noire, Lyanna, observe discr√®tement.
        La taverne est situ√©e dans le village de Pierrefond, pr√®s de la For√™t Sombre.
        """
        
        print(f"Testing with narrative: {test_narrative}")
        
        # Extract entities
        entities = await game_engine._extract_entities_from_narrative(test_narrative)
        print(f"‚úì Entities extracted: {entities}")
        
        # Validate extraction
        expected_characters = ["marcus", "lyanna"]
        expected_locations = ["dragon endormi", "pierrefond", "for√™t sombre"]
        
        found_characters = [char["name"].lower() for char in entities.get("characters", [])]
        found_locations = [loc["name"].lower() for loc in entities.get("locations", [])]
        
        print(f"Found characters: {found_characters}")
        print(f"Found locations: {found_locations}")
        
        character_match = any(char in " ".join(found_characters) for char in expected_characters)
        location_match = any(loc in " ".join(found_locations) for loc in expected_locations)
        
        if character_match:
            print("‚úì Character extraction working")
        else:
            print("‚ö†Ô∏è Character extraction may need improvement")
            
        if location_match:
            print("‚úì Location extraction working")
        else:
            print("‚ö†Ô∏è Location extraction may need improvement")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Entity Extraction Test Failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_world_state_integration():
    """Test WorldState integration."""
    print("\n=== Testing WorldState Integration ===")
    
    try:
        ai_client = AIClient()
        game_engine = GameEngine(ai_client)
        
        # Initialize game
        game_engine.set_hero_name("Aiden")
        
        print(f"‚úì Game initialized with hero: {game_engine.hero_name}")
        print(f"‚úì Initial world state: {game_engine.world_state.get_world_summary()}")
        
        # Test adding system message
        game_engine.add_system_message("Tu es un ma√Ætre de jeu RPG.")
        
        # Test adding user message
        game_engine.add_user_message("Je veux explorer la for√™t.")
        
        # Simulate AI response
        game_engine.add_assistant_message("Tu entres dans une for√™t sombre. Choix: 1) Avancer 2) √âcouter 3) Grimper 4) Reculer")
        
        print(f"‚úì Timeline has {len(game_engine.world_state.timeline)} events")
        print(f"‚úì Current turn: {game_engine.get_current_turn_number()}")
        
        # Test story log generation
        story_log = game_engine.get_story_log_for_api()
        print(f"‚úì Story log has {len(story_log)} messages")
        
        for i, msg in enumerate(story_log):
            print(f"  {i+1}. {msg['role']}: {msg['content'][:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå WorldState Integration Test Failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_full_game_cycle():
    """Test a complete game cycle."""
    print("\n=== Testing Full Game Cycle ===")
    
    try:
        ai_client = AIClient()
        game_engine = GameEngine(ai_client)
        
        # Setup game
        game_engine.set_hero_name("TestHero")
        game_engine.add_system_message("Aventure fantasy avec TestHero. Style: direct. Format: histoire + 4 choix.")
        
        # First AI call
        story_log = game_engine.get_story_log_for_api()
        game_engine.add_user_message("Commence l'aventure dans une for√™t.")
        
        print("Making first AI call...")
        story_log = game_engine.get_story_log_for_api()
        ai_response = await ai_client.complete(story_log, "full_cycle_test")
        
        game_engine.add_assistant_message(ai_response)
        narrative, choices = game_engine.extract_choices(ai_response)
        
        print(f"‚úì First response received")
        print(f"‚úì Narrative: {narrative[:100]}...")
        print(f"‚úì Choices found: {len(choices)}")
        for i, choice in enumerate(choices):
            print(f"  {i+1}. {choice}")
        
        # Test entity extraction on the narrative
        print("Testing entity extraction on generated narrative...")
        await game_engine.update_world_state_from_narrative(narrative)
        
        updated_summary = game_engine.world_state.get_world_summary()
        print(f"‚úì Updated world state: {updated_summary}")
        
        if len(choices) == 4:
            print("‚úì Full game cycle working correctly")
            return True
        else:
            print(f"‚ö†Ô∏è Expected 4 choices, got {len(choices)}")
            return False
        
    except Exception as e:
        print(f"‚ùå Full Game Cycle Test Failed: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """Run all API tests."""
    print("üß™ Starting Gemini API Tests...\n")
    
    # Setup logging
    logging.basicConfig(level=logging.INFO)
    
    tests = [
        ("Basic API Connection", test_basic_api_connection),
        ("Story Generation", test_story_generation),
        ("Entity Extraction", test_entity_extraction),
        ("WorldState Integration", test_world_state_integration),
        ("Full Game Cycle", test_full_game_cycle),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} crashed: {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "="*50)
    print("üèÅ TEST SUMMARY")
    print("="*50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nTotal: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ All tests passed! API is fully functional.")
    else:
        print("‚ö†Ô∏è Some tests failed. Check the logs above.")
    
    return passed == len(results)


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
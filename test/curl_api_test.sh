#!/bin/bash

# Test direct de l'API Gemini avec curl
echo "üîç TEST DIRECT API GEMINI"
echo "=========================="

# Lire la cl√© API depuis .env
if [ -f ".env" ]; then
    API_KEY=$(grep GEMINI_API_KEY .env | cut -d '=' -f2)
else
    echo "‚ùå Fichier .env non trouv√©!"
    exit 1
fi

if [ -z "$API_KEY" ]; then
    echo "‚ùå Cl√© API non trouv√©e dans .env!"
    exit 1
fi

echo "‚úÖ Cl√© API trouv√©e: ${API_KEY:0:20}..."

# Test 1: Minimal avec gemini-1.5-flash
echo ""
echo "üß™ TEST 1: Minimal gemini-1.5-flash (50 tokens)"
curl -s \
  -H "x-goog-api-key: $API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "contents": [
      {
        "role": "user",
        "parts": [{"text": "Hello"}]
      }
    ],
    "generationConfig": {
      "maxOutputTokens": 50
    }
  }' \
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent" | \
  python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if 'error' in data:
        print(f'   ‚ùå ERREUR: {data[\"error\"]}')
    elif 'candidates' in data:
        reason = data['candidates'][0].get('finishReason', 'UNKNOWN')
        if reason == 'STOP':
            text_len = len(data['candidates'][0]['content']['parts'][0]['text'])
            print(f'   ‚úÖ SUCCESS: {text_len} caract√®res g√©n√©r√©s')
        else:
            print(f'   ‚ö†Ô∏è  FINISH_REASON: {reason}')
    else:
        print(f'   ‚ùå R√âPONSE INATTENDUE: {data}')
except Exception as e:
    print(f'   ‚ùå ERREUR PARSING: {e}')
"

# Test 2: Minimal avec gemini-2.5-flash
echo ""
echo "üß™ TEST 2: Minimal gemini-2.5-flash (50 tokens)"
curl -s \
  -H "x-goog-api-key: $API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "contents": [
      {
        "role": "user",
        "parts": [{"text": "Hello"}]
      }
    ],
    "generationConfig": {
      "maxOutputTokens": 50
    }
  }' \
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent" | \
  python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if 'error' in data:
        print(f'   ‚ùå ERREUR: {data[\"error\"]}')
    elif 'candidates' in data:
        reason = data['candidates'][0].get('finishReason', 'UNKNOWN')
        if reason == 'STOP':
            text_len = len(data['candidates'][0]['content']['parts'][0]['text'])
            print(f'   ‚úÖ SUCCESS: {text_len} caract√®res g√©n√©r√©s')
        else:
            print(f'   ‚ö†Ô∏è  FINISH_REASON: {reason}')
    else:
        print(f'   ‚ùå R√âPONSE INATTENDUE: {data}')
except Exception as e:
    print(f'   ‚ùå ERREUR PARSING: {e}')
"

# Test 3: Notre prompt style RPG
echo ""
echo "üß™ TEST 3: Prompt RPG avec gemini-1.5-flash (300 tokens)"
curl -s \
  -H "x-goog-api-key: $API_KEY" \
  -H "Content-Type: application/json" \
  -d '{
    "contents": [
      {
        "role": "user",
        "parts": [{"text": "Aventure fantasy avec Tim. √âcris une histoire courte + 4 choix num√©rot√©s."}]
      }
    ],
    "generationConfig": {
      "maxOutputTokens": 300,
      "temperature": 0.8
    }
  }' \
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent" | \
  python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if 'error' in data:
        print(f'   ‚ùå ERREUR: {data[\"error\"]}')
    elif 'candidates' in data:
        reason = data['candidates'][0].get('finishReason', 'UNKNOWN')
        if reason == 'STOP':
            text_len = len(data['candidates'][0]['content']['parts'][0]['text'])
            print(f'   ‚úÖ SUCCESS: {text_len} caract√®res g√©n√©r√©s')
            print(f'   üìù D√©but: {data[\"candidates\"][0][\"content\"][\"parts\"][0][\"text\"][:100]}...')
        else:
            print(f'   ‚ö†Ô∏è  FINISH_REASON: {reason}')
    else:
        print(f'   ‚ùå R√âPONSE INATTENDUE: {data}')
except Exception as e:
    print(f'   ‚ùå ERREUR PARSING: {e}')
"

echo ""
echo "üéØ CONCLUSIONS:"
echo "   - Si TEST 1 marche ‚Üí API OK, probl√®me avec 2.5-flash"
echo "   - Si TEST 1 √©choue ‚Üí Probl√®me cl√© API ou quota"
echo "   - Si TEST 3 marche ‚Üí Notre code a un probl√®me"
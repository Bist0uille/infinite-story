#!/usr/bin/env python3
"""
Test script pour analyser le GameEngine sans interface utilisateur.
Simule une session de jeu compl√®te pour analyser :
- Construction du prompt syst√®me
- Gestion de l'historique
- Extraction des choix
- Gestion du world_state
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.core.engine import GameEngine
from src.services.data_service import load_json, PRESET_UNIVERSES_FILE, PRESET_STYLES_FILE
from src.utils.logger_config import setup_logging
import logging

def print_separator(title=""):
    print("\n" + "="*80)
    if title:
        print(f" {title}")
        print("="*80)

def analyze_game_engine():
    """Analyse compl√®te du GameEngine"""
    setup_logging()
    
    print_separator("ANALYSE DU GAME ENGINE - SESSION DE TEST")
    
    # 1. Initialisation du moteur
    engine = GameEngine()
    print(f"‚úÖ GameEngine initialis√©")
    print(f"   - Hero name par d√©faut: '{engine.hero_name}'")
    print(f"   - Story log vide: {len(engine.story_log)} messages")
    print(f"   - World state vide: {len(engine.world_state)} √©l√©ments")
    
    # 2. Chargement des donn√©es
    preset_universes = load_json(PRESET_UNIVERSES_FILE, {})
    preset_styles = load_json(PRESET_STYLES_FILE, {})
    
    print_separator("DONN√âES CHARG√âES")
    print(f"‚úÖ Univers pr√©d√©finis: {list(preset_universes.keys())}")
    print(f"‚úÖ Styles pr√©d√©finis: {list(preset_styles.keys())}")
    
    # 3. Configuration du jeu
    engine.set_hero_name("Aeliana")
    universe_name = "Fantasy Classique"
    style_name = "Dramatique"
    
    base_prompt = preset_universes[universe_name]["prompt"].replace("{hero_name}", engine.hero_name)
    style_instruction = preset_styles[style_name]
    
    print_separator("CONFIGURATION DE LA SESSION")
    print(f"‚úÖ Nom du h√©ros: '{engine.hero_name}'")
    print(f"‚úÖ Univers choisi: '{universe_name}'")
    print(f"‚úÖ Style narratif: '{style_name}'")
    
    # 4. Construction du prompt syst√®me
    system_prompt = engine.build_system_prompt(base_prompt, style_instruction)
    engine.add_system_message(system_prompt)
    
    print_separator("PROMPT SYST√àME CONSTRUIT")
    print("üìù Contenu du prompt syst√®me:")
    print("-" * 50)
    print(system_prompt)
    print("-" * 50)
    print(f"‚úÖ Longueur: {len(system_prompt)} caract√®res")
    print(f"‚úÖ Messages dans story_log: {len(engine.story_log)}")
    
    # 5. Simulation de r√©ponses IA (sans vraie IA)
    print_separator("SIMULATION D'UNE SESSION DE JEU")
    
    # Premi√®re r√©ponse IA simul√©e
    ai_response_1 = """Aeliana se r√©veille dans une taverne brumeuse, la t√™te lourde et les souvenirs flous. Autour d'elle, des murmures inqui√©tants s'√©l√®vent : "Elle porte la marque..." "Les Gardiens la cherchent..." "Il faut qu'elle parte, maintenant !" 
    
Un homme encapuchonn√© s'approche discr√®tement, glissant un parchemin scell√© dans sa main tremblante. "Votre destin vous attend au-del√† des Monts Oubli√©s", chuchote-t-il avant de dispara√Ætre dans l'ombre.

1. Examiner imm√©diatement le parchemin dans la taverne
2. Fuir discr√®tement par la porte arri√®re
3. Confronter les clients qui murmurent √† votre sujet
4. Demander refuge au tavernier et r√©v√©ler votre identit√©"""

    print("üé≠ R√âPONSE IA SIMUL√âE #1:")
    print("-" * 50)
    print(ai_response_1)
    print("-" * 50)
    
    # Test d'extraction des choix
    engine.add_assistant_message(ai_response_1)
    narrative, choices = engine.extract_choices(ai_response_1)
    
    print("\nüìä ANALYSE DE L'EXTRACTION:")
    print(f"‚úÖ Narrative extraite ({len(narrative)} caract√®res):")
    print(f"   {narrative[:100]}...")
    print(f"‚úÖ Choix extraits ({len(choices)}):")
    for i, choice in enumerate(choices, 1):
        print(f"   {i}. {choice}")
    
    # 6. Simulation d'un choix utilisateur
    user_choice = "Examiner imm√©diatement le parchemin dans la taverne"
    prompt_with_context = engine.build_prompt_with_world_state(user_choice)
    engine.add_user_message(prompt_with_context)
    
    print_separator("CHOIX UTILISATEUR ET PROMPT G√âN√âR√â")
    print(f"üéØ Choix utilisateur: '{user_choice}'")
    print(f"üìù Prompt g√©n√©r√© avec contexte:")
    print("-" * 50)
    print(prompt_with_context)
    print("-" * 50)
    
    # 7. Simulation de mise √† jour du world_state
    print_separator("SIMULATION WORLD STATE")
    
    # Simulation de faits extraits
    simulated_facts = """Taverne: Lieu myst√©rieux o√π Aeliana s'est r√©veill√©e
Homme encapuchonn√©: Myst√©rieux messager qui a donn√© un parchemin
Parchemin scell√©: Document important li√© au destin d'Aeliana
Monts Oubli√©s: Destination mentionn√©e par l'homme encapuchonn√©
Les Gardiens: Groupe qui recherche Aeliana
La marque: Signe distinctif port√© par Aeliana"""
    
    engine.update_world_state_from_facts(simulated_facts)
    
    print("üåç WORLD STATE MIS √Ä JOUR:")
    for key, value in engine.world_state.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    # 8. Deuxi√®me tour avec world_state
    ai_response_2 = """Le parchemin r√©v√®le une carte ancienne marqu√©e de symboles runiques. Soudain, des gardes en armure noire font irruption dans la taverne ! "Livrez-nous celle qui porte la Marque du Dragon !" rugit leur capitaine.

Le tavernier, un vieil homme aux yeux per√ßants, murmure : "Passe par les caves, Aeliana. Le tunnel m√®ne aux docks."

1. Suivre le conseil du tavernier et fuir par les caves
2. Affronter courageusement les gardes avec la magie de votre marque
3. N√©gocier avec le capitaine en r√©v√©lant votre v√©ritable identit√©
4. Cr√©er une distraction en renversant les tonneaux d'alcool"""

    print_separator("DEUXI√àME R√âPONSE IA AVEC CONTEXTE")
    print("üé≠ R√âPONSE IA SIMUL√âE #2:")
    print("-" * 50)
    print(ai_response_2)
    print("-" * 50)
    
    engine.add_assistant_message(ai_response_2)
    narrative_2, choices_2 = engine.extract_choices(ai_response_2)
    
    print(f"‚úÖ Nouveaux choix extraits ({len(choices_2)}):")
    for i, choice in enumerate(choices_2, 1):
        print(f"   {i}. {choice}")
    
    # Test avec world_state
    user_choice_2 = "Suivre le conseil du tavernier et fuir par les caves"
    prompt_with_state = engine.build_prompt_with_world_state(user_choice_2)
    
    print_separator("PROMPT AVEC WORLD STATE")
    print("üìù Prompt incluant le world state:")
    print("-" * 50)
    print(prompt_with_state)
    print("-" * 50)
    
    # 9. Test de sauvegarde/chargement
    print_separator("TEST SAUVEGARDE/CHARGEMENT")
    
    save_data = engine.get_save_data()
    print(f"‚úÖ Donn√©es de sauvegarde g√©n√©r√©es:")
    print(f"   - Story log: {len(save_data['story_log'])} messages")
    print(f"   - World state: {len(save_data['world_state'])} √©l√©ments")
    
    # Nouveau moteur pour test de chargement
    engine_loaded = GameEngine()
    engine_loaded.load_game_state(save_data)
    
    print(f"‚úÖ Test de chargement:")
    print(f"   - Story log charg√©: {len(engine_loaded.story_log)} messages")
    print(f"   - World state charg√©: {len(engine_loaded.world_state)} √©l√©ments")
    print(f"   - Coh√©rence: {engine.world_state == engine_loaded.world_state}")
    
    # 10. Analyse finale
    print_separator("ANALYSE FINALE")
    
    final_narrative, final_choices = engine_loaded.get_last_narrative_and_choices()
    
    print("üìä R√âSUM√â DE LA SESSION:")
    print(f"   ‚Ä¢ Total messages: {len(engine.story_log)}")
    print(f"   ‚Ä¢ √âl√©ments world_state: {len(engine.world_state)}")
    print(f"   ‚Ä¢ Derni√®re narrative: {len(final_narrative)} caract√®res")
    print(f"   ‚Ä¢ Derniers choix: {len(final_choices)}")
    print(f"   ‚Ä¢ Hero name: '{engine.hero_name}'")
    
    print("\nüéØ FONCTIONNALIT√âS TEST√âES:")
    print("   ‚úÖ Construction de prompt syst√®me")
    print("   ‚úÖ Gestion de l'historique (story_log)")
    print("   ‚úÖ Extraction narrative/choix")
    print("   ‚úÖ World state dynamique")
    print("   ‚úÖ Sauvegarde/chargement")
    print("   ‚úÖ Coh√©rence des donn√©es")

if __name__ == "__main__":
    analyze_game_engine()